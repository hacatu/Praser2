start= whitespace? statements?
statements= (label_tag? whitespace? expr post_comma* semicolon)* label_tag? expr post_comma*
label_tag= whitespace? identifier whitespace? colon colon whitespace?
post_comma= comma whitespace?
expr= expr_prefix (whitespace? ocommas_op_infix whitespace? expr_prefix)*
ocommas_op_infix= commas_op_infix | op_infix
commas_op_infix< post_comma+ op_infix?
op_infix< "->"|"$="|"**="|"*="|"/="|"%="|"<<="|">>="|"+="|"-="|"&="|"|="|"^="|"~&="|"~|="|"~^="|"&&="|"||="|"^^="|"!&&="|"!||="|"!^^="|"&&"|"||"|"^^"|"!&&"|"!||"|"!^^"|"<<"|">>"|"<=>"|">="|"<="|"=="|"!="|"<-"|">"|"<"|"="|","|"&"|"|"|"^"|"~&"|"~|"|"~^"|"+"|"-"|"**"|"*"|"/"|"%"|"$"|":"
expr_prefix= (whitespace? op_prefix)* whitespace? expr_postfix
op_prefix= "++"|"--"|"+"|"-"|"!"|"~"|"*"|"&"
expr_postfix= expr0 (whitespace? post_comma* op_postfix)* whitespace?
op_postfix= "++"|"--"|".."|"?"|bare_block|bare_list|access|declaration
expr0< declaration | atom
access= dot identifier
declaration= at atom
atom= bare_block | literal | identifier
block= label_tag? bare_block
bare_block= lparen whitespace? statements? rparen
list= label_tag? bare_list
bare_list= lbrace whitespace? statements? rbrace
identifier= [a-zA-Z_] [a-zA-Z_0-9]*
literal= empty_tuple | list | dict | block | complex | real_numeric | string | char
dict= label_tag? lbracket whitespace? statements? whitespace? rbracket
empty_tuple= lparen whitespace? rparen
int= int_b | int_o | int_h | int_d
int_b= b_pre [01]+ (squote [01]+)*
int_o= o_pre [0-7]+ (squote [0-7]+)*
int_h= h_pre [0-9a-fA-F]+ (squote [0-9a-fA-F]+)*
int_d= [0-9]+ (squote [0-9]+)*
float= scientific | subnormal | normal
scientific< subnormal | normal | [0-9]+ [Ee] [+\-]? [0-9]+
subnormal< "." [0-9]+
normal< [0-9]+ "." [0-9]*
real_numeric< float | int
complex= (real_numeric whitespace? I) | (real_numeric whitespace? [+\-] real_numeric whitespace? I)
string= dquote schar* dquote
char= squote schar squote
whitespace: (space | multi_comment | single_comment)+
space: [\t\f\r\n\v ]
single_comment< pound [^\n\r]*
multi_comment< pound block_comment
block_comment< lbracket ([^{}] | block_comment)* rbracket
semicolon: ";"
colon: ":"
dot: "."
at: "@"
lparen: "("
rparen: ")"
lbrace: "["
rbrace: "]"
lbracket: "{"
rbracket: "}"
comma: ","
equals: "="
squote: "'"
dquote: "\""
b_pre: "0" [bB]
o_pre: "0" [oO]
h_pre: "0" [xX]
I: [iIjJ]
pound: "#"
schar< [^\\"\n] | esc_seq
esc_seq< special
